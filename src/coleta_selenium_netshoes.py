"""
=======================
Coletor de Dados Netshoes
=======================

Descri√ß√£o:
-----------
Este script automatiza a coleta de dados de produtos no site da Netshoes utilizando Selenium. 
Ele simula a navega√ß√£o de um usu√°rio, realiza buscas por "t√™nis nike" e extrai os nomes 
e pre√ßos dos produtos exibidos na primeira p√°gina de resultados.

Funcionalidades:
----------------
- Acessa o site da Netshoes automaticamente.
- Preenche e envia a barra de pesquisa com um termo espec√≠fico.
- Aguarda o carregamento dos resultados usando WebDriverWait.
- Extrai nome e pre√ßo de cada produto encontrado.
- Salva os dados capturados em um arquivo Excel (`relatorio.xlsx`).

Aplica√ß√£o no Mundo Real:
-------------------------
Este coletor pode ser usado para:
‚úî **An√°lise de pre√ßos** ‚Üí Comparar ofertas e tend√™ncias do mercado esportivo.
‚úî **Monitoramento de concorr√™ncia** ‚Üí Empresas podem acompanhar pre√ßos e produtos rivais.
‚úî **Automa√ß√£o de pesquisas** ‚Üí Evita a necessidade de buscar manualmente informa√ß√µes repetitivas.
‚úî **Ci√™ncia de dados** ‚Üí Pode servir como base para modelos que analisam varia√ß√£o de pre√ßos ao longo do tempo.

Como Expandir:
--------------
üîπ Implementar navega√ß√£o entre p√°ginas para capturar mais resultados.
üîπ Melhorar filtros de busca para extrair produtos espec√≠ficos.
üîπ Integrar com banco de dados para armazenamento e an√°lise hist√≥rica.
üîπ Criar relat√≥rios gr√°ficos autom√°ticos com os dados coletados.

Autor: Lucas  
√öltima Atualiza√ß√£o: Junho/2025
"""


# Importa√ß√£o de bibliotecas
import csv
import openpyxl
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options


chrome_options = Options()
chrome_options.add_argument("--disable-blink-features=AutomationControlled")  
chrome_options.add_argument("--ignore-ssl-errors=yes")  # Ignora erros de SSL  
chrome_options.add_argument("--ignore-certificate-errors")  
chrome_options.add_argument("--disable-gpu")  
chrome_options.add_argument("--disable-dev-shm-usage")  
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-web-security")  # Desativa algumas verifica√ß√µes de seguran√ßa
chrome_options.add_argument("--allow-running-insecure-content")  # Permite carregamento de p√°ginas inseguras
chrome_options.add_argument("--disable-popup-blocking")  # Evita que pop-ups interfiram na execu√ß√£o
chrome_options.add_argument("--headless=new")  # Executa o Chrome sem interface gr√°fica (testando modo mais leve)
chrome_options.add_argument("--disable-software-rasterizer")  # Desativa renderiza√ß√£o via software
chrome_options.add_argument("--disable-extensions")  # Evita que extens√µes causem erro
chrome_options.add_argument("--start-maximized")  # Evita problemas de resolu√ß√£o ao carregar elementos vis√≠veis
chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)")




# Inicializando o WebDriver
driver = webdriver.Chrome(options=chrome_options)

driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
precos_script = driver.execute_script("return document.querySelectorAll('.price__list--card')")

try:
    # Abrir o site da Netshoes
    driver.get("https://www.netshoes.com.br")

    # Esperar a barra de pesquisa estar vis√≠vel
    wait = WebDriverWait(driver, 10)
    # Localizando a barra de pesquisa
    search_box = wait.until(EC.presence_of_element_located((By.NAME, "search")))

    # Digitar "t√™nis nike" e buscar
    search_box.send_keys("t√™nis nike")
    search_box.send_keys(Keys.RETURN)

    # Esperar os resultados carregarem e capturar os nomes e pre√ßos dos produtos usando XPath
    wait.until(EC.presence_of_element_located((By.XPATH, "//h3[contains(@class, 'product-card__title')]")))
    produtos = driver.find_elements(By.XPATH, "//h3[contains(@class, 'product-card__title')]")
    time.sleep(5)  # Espera extra para carregamento

    precos = driver.find_elements(By.XPATH, "//div[contains(@class, 'product-card')]//span[contains(@class, 'price')]")

    if not precos:
        print("‚ùå Nenhum pre√ßo encontrado! O XPath pode estar incorreto ou os elementos ainda n√£o carregaram.")
    else:
        for preco in precos:
            print(f"‚úÖ Pre√ßo encontrado: {preco.text}")



    # Criar uma nova planilha Excel
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Netshoes Dados"

    # Adicionar cabe√ßalhos
    sheet.append(["Produto","Pre√ßo"])

    # Adicionar os dados √† planilha
    for produto, preco in zip(produtos, precos):
        sheet.append([produto.text, preco.text])

    # Salvar o arquivo Excel
    workbook.save("data/relatorio.xlsx")

    # Mensagem de sucesso
    print("\n‚úÖ Dados salvos em 'data/relatorio.xlsx'!")


except Exception as e:
    # Capturar erros 
    print(f"\n‚ùå Ocorreu um erro: {e}")


finally:
     # Fechar o navegador
     driver.quit()